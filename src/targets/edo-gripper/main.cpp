#define YOU_WANT_TO_USE_EDO_JOINT_MESSAGES true
#define YOU_WANT_TO_SET_THE_BAUDRATE false

#include <math.h>
#include <ModuleConfiguration.hpp>
#include <Module.hpp>

#include <cstdlib>

// --- BOARD IMPL -------------------------------------------------------------
#include <core/dynamixel_driver/Dynamixel.hpp>

// --- MODULE -----------------------------------------------------------------
Module module;

// *** DO NOT MOVE THE CODE ABOVE THIS COMMENT *** //

// --- MESSAGES ---------------------------------------------------------------
#include <core/common_msgs/Led.hpp>
#include <core/dynamixel_msgs/SwitchMsg.hpp>
#include <core/dynamixel_msgs/DynamixelCommandMsg.hpp>
#include <core/dynamixel_msgs/DynamixelRegisterMsg.hpp>
#include <core/dynamixel_msgs/DynamixelScanMsg.hpp>
#include <core/dynamixel_msgs/DynamixelStateMsg.hpp>
#include <core/dynamixel_msgs/DynamixelServoMsg.hpp>

#if YOU_WANT_TO_USE_EDO_JOINT_MESSAGES
#include <comau_edo/edo_msgs/EdoJointCtrl.hpp>
#include <core/control_msgs/Encoder_State.hpp>
#include <comau_edo/edo_msgs/EdoJointVersion.hpp>
#include <comau_edo/edo_msgs/EdoJointInit.hpp>
// Nibbe basso: codifica su 4 bits
#define J_STATE_ACK_INIT      1
#define J_STATE_ACK_CALIB     2
#define J_STATE_ACK_CONFIG    3
#define J_STATE_ACK_RESET     4
#define J_STATE_ACK_VERSION   5
#define J_STATE_ACK_MASK      0x0F
// Nibble alto: viene invece gestito a singolo bit
#define J_STATE_SPARE         4  // Bit XXXY.ZZZZ Not used
#define J_STATE_UNDERVOLTAGE  5  // Bit XXYX.ZZZZ
#define J_STATE_OVERCURRENT   6  // Bit XYXX.ZZZZ
#define J_STATE_UNCALIB       7  // Bit YXXX.ZZZZ

#define J_STATE_ACK_CYCLES    30

#define EDO_JOINT_FW_MAJOR      2
#define EDO_JOINT_FW_MINOR      0
#define EDO_JOINT_FW_REVISION   1804
#define EDO_JOINT_FW_SVN        458
#endif
#define AX7_JOINT_MASK ((uint64_t)(0x40))

// --- NODES ------------------------------------------------------------------
#include <core/led/Subscriber.hpp>

// --- CONFIGURATIONS ---------------------------------------------------------
core::led::SubscriberConfiguration led_subscriber_configuration_default;

// --- NODES ------------------------------------------------------------------
core::led::Subscriber led_subscriber("led_sub", core::os::Thread::PriorityEnum::LOWEST);

#include <core/mw/Publisher.hpp>
#include <core/mw/Subscriber.hpp>
#define GRIPPER_SERVO    1
#define GRIPPER_NO_SERVO 0

core::dynamixel_msgs::DynamixelServoMsg gbl_servo_pub;

#define ENCODER_TBL_MIN 342
#define ENCODER_TBL_MAX 722

static float sat_from_bits_to_mm[] = {
/* 342 */ 2.0 *   40.8594404014829,
/* 343 */ 2.0 *   40.8760506232761,
/* 344 */ 2.0 *   40.8916182671476,
/* 345 */ 2.0 *   40.9061429260742,
/* 346 */ 2.0 *   40.9196242203018,
/* 347 */ 2.0 *   40.9320617973557,
/* 348 */ 2.0 *   40.9434553320498,
/* 349 */ 2.0 *   40.9538045264946,
/* 350 */ 2.0 *   40.9631091101058,
/* 351 */ 2.0 *   40.9713688396106,
/* 352 */ 2.0 *   40.9785834990546,
/* 353 */ 2.0 *   40.9847528998071,
/* 354 */ 2.0 *   40.9898768805663,
/* 355 */ 2.0 *   40.9939553073633,
/* 356 */ 2.0 *   40.9969880735658,
/* 357 */ 2.0 *   40.9989750998806,
/* 358 */ 2.0 *    40.999916334356,
/* 359 */ 2.0 *    40.999811752383,
/* 360 */ 2.0 *    40.998661356696,
/* 361 */ 2.0 *   40.9964651773726,
/* 362 */ 2.0 *   40.9932232718329,
/* 363 */ 2.0 *   40.9889357248381,
/* 364 */ 2.0 *    40.983602648488,
/* 365 */ 2.0 *   40.9772241822185,
/* 366 */ 2.0 *   40.9698004927974,
/* 367 */ 2.0 *   40.9613317743207,
/* 368 */ 2.0 *   40.9518182482069,
/* 369 */ 2.0 *   40.9412601631916,
/* 370 */ 2.0 *   40.9296577953208,
/* 371 */ 2.0 *   40.9170114479438,
/* 372 */ 2.0 *   40.9033214517054,
/* 373 */ 2.0 *   40.8885881645368,
/* 374 */ 2.0 *   40.8728119716466,
/* 375 */ 2.0 *   40.8559932855109,
/* 376 */ 2.0 *   40.8381325458619,
/* 377 */ 2.0 *   40.8192302196771,
/* 378 */ 2.0 *   40.7992868011665,
/* 379 */ 2.0 *   40.7783028117602,
/* 380 */ 2.0 *   40.7562788000942,
/* 381 */ 2.0 *   40.7332153419968,
/* 382 */ 2.0 *   40.7091130404726,
/* 383 */ 2.0 *   40.6839725256877,
/* 384 */ 2.0 *   40.6577944549524,
/* 385 */ 2.0 *   40.6305795127047,
/* 386 */ 2.0 *   40.6023284104919,
/* 387 */ 2.0 *   40.5730418869522,
/* 388 */ 2.0 *   40.5427207077954,
/* 389 */ 2.0 *   40.5113656657829,
/* 390 */ 2.0 *   40.4789775807068,
/* 391 */ 2.0 *   40.4455572993688,
/* 392 */ 2.0 *   40.4111056955577,
/* 393 */ 2.0 *   40.3756236700266,
/* 394 */ 2.0 *   40.3391121504697,
/* 395 */ 2.0 *   40.3015720914976,
/* 396 */ 2.0 *   40.2630044746128,
/* 397 */ 2.0 *   40.2234103081835,
/* 398 */ 2.0 *   40.1827906274176,
/* 399 */ 2.0 *   40.1411464943357,
/* 400 */ 2.0 *   40.0984789977429,
/* 401 */ 2.0 *   40.0547892532008,
/* 402 */ 2.0 *   40.0100784029983,
/* 403 */ 2.0 *   39.9643476161212,
/* 404 */ 2.0 *   39.9175980882224,
/* 405 */ 2.0 *     39.86983104159,
/* 406 */ 2.0 *   39.8210477251156,
/* 407 */ 2.0 *   39.7712494142619,
/* 408 */ 2.0 *   39.7204374110289,
/* 409 */ 2.0 *     39.66861304392,
/* 410 */ 2.0 *   39.6157776679076,
/* 411 */ 2.0 *    39.561932664397,
/* 412 */ 2.0 *   39.5070794411911,
/* 413 */ 2.0 *   39.4512194324528,
/* 414 */ 2.0 *   39.3943540986682,
/* 415 */ 2.0 *   39.3364849266079,
/* 416 */ 2.0 *   39.2776134292884,
/* 417 */ 2.0 *   39.2177411459323,
/* 418 */ 2.0 *   39.1568696419284,
/* 419 */ 2.0 *   39.0950005087906,
/* 420 */ 2.0 *   39.0321353641162,
/* 421 */ 2.0 *   38.9682758515436,
/* 422 */ 2.0 *   38.9034236407096,
/* 423 */ 2.0 *   38.8375804272055,
/* 424 */ 2.0 *   38.7707479325327,
/* 425 */ 2.0 *   38.7029279040579,
/* 426 */ 2.0 *   38.6341221149674,
/* 427 */ 2.0 *   38.5643323642206,
/* 428 */ 2.0 *    38.493560476503,
/* 429 */ 2.0 *   38.4218083021786,
/* 430 */ 2.0 *   38.3490777172415,
/* 431 */ 2.0 *   38.2753706232667,
/* 432 */ 2.0 *   38.2006889473605,
/* 433 */ 2.0 *     38.12503464211,
/* 434 */ 2.0 *   38.0484096855325,
/* 435 */ 2.0 *   37.9708160810229,
/* 436 */ 2.0 *   37.8922558573024,
/* 437 */ 2.0 *   37.8127310683644,
/* 438 */ 2.0 *   37.7322437934218,
/* 439 */ 2.0 *   37.6507961368517,
/* 440 */ 2.0 *   37.5683902281412,
/* 441 */ 2.0 *   37.4850282218311,
/* 442 */ 2.0 *   37.4007122974599,
/* 443 */ 2.0 *   37.3154446595067,
/* 444 */ 2.0 *   37.2292275373336,
/* 445 */ 2.0 *   37.1420631851274,
/* 446 */ 2.0 *   37.0539538818409,
/* 447 */ 2.0 *   36.9649019311327,
/* 448 */ 2.0 *   36.8749096613075,
/* 449 */ 2.0 *   36.7839794252553,
/* 450 */ 2.0 *   36.6921136003894,
/* 451 */ 2.0 *   36.5993145885845,
/* 452 */ 2.0 *   36.5055848161142,
/* 453 */ 2.0 *   36.4109267335868,
/* 454 */ 2.0 *   36.3153428158822,
/* 455 */ 2.0 *   36.2188355620864,
/* 456 */ 2.0 *   36.1214074954265,
/* 457 */ 2.0 *   36.0230611632047,
/* 458 */ 2.0 *   35.9237991367316,
/* 459 */ 2.0 *   35.8236240112592,
/* 460 */ 2.0 *   35.7225384059129,
/* 461 */ 2.0 *   35.6205449636228,
/* 462 */ 2.0 *    35.517646351055,
/* 463 */ 2.0 *   35.4138452585417,
/* 464 */ 2.0 *   35.3091444000109,
/* 465 */ 2.0 *   35.2035465129152,
/* 466 */ 2.0 *   35.0970543581606,
/* 467 */ 2.0 *   34.9896707200341,
/* 468 */ 2.0 *    34.881398406131,
/* 469 */ 2.0 *   34.7722402472813,
/* 470 */ 2.0 *   34.6621990974759,
/* 471 */ 2.0 *   34.5512778337921,
/* 472 */ 2.0 *   34.4394793563179,
/* 473 */ 2.0 *   34.3268065880765,
/* 474 */ 2.0 *   34.2132624749501,
/* 475 */ 2.0 *   34.0988499856023,
/* 476 */ 2.0 *    33.983572111401,
/* 477 */ 2.0 *   33.8674318663399,
/* 478 */ 2.0 *   33.7504322869599,
/* 479 */ 2.0 *   33.6325764322694,
/* 480 */ 2.0 *   33.5138673836646,
/* 481 */ 2.0 *    33.394308244849,
/* 482 */ 2.0 *    33.273902141752,
/* 483 */ 2.0 *   33.1526522224471,
/* 484 */ 2.0 *   33.0305616570701,
/* 485 */ 2.0 *   32.9076336377356,
/* 486 */ 2.0 *   32.7838713784541,
/* 487 */ 2.0 *   32.6592781150473,
/* 488 */ 2.0 *   32.5338571050643,
/* 489 */ 2.0 *   32.4076116276957,
/* 490 */ 2.0 *   32.2805449836884,
/* 491 */ 2.0 *    32.152660495259,
/* 492 */ 2.0 *   32.0239615060071,
/* 493 */ 2.0 *   31.8944513808276,
/* 494 */ 2.0 *   31.7641335058232,
/* 495 */ 2.0 *   31.6330112882153,
/* 496 */ 2.0 *   31.5010881562555,
/* 497 */ 2.0 *   31.3683675591355,
/* 498 */ 2.0 *   31.2348529668972,
/* 499 */ 2.0 *   31.1005478703417,
/* 500 */ 2.0 *   30.9654557809384,
/* 501 */ 2.0 *   30.8295802307329,
/* 502 */ 2.0 *   30.6929247722547,
/* 503 */ 2.0 *   30.5554929784246,
/* 504 */ 2.0 *   30.4172884424607,
/* 505 */ 2.0 *   30.2783147777851,
/* 506 */ 2.0 *    30.138575617929,
/* 507 */ 2.0 *   29.9980746164378,
/* 508 */ 2.0 *   29.8568154467756,
/* 509 */ 2.0 *   29.7148018022293,
/* 510 */ 2.0 *   29.5720373958117,
/* 511 */ 2.0 *   29.4285259601648,
/* 512 */ 2.0 *   29.2842712474619,
/* 513 */ 2.0 *   29.1392770293097,
/* 514 */ 2.0 *   28.9935470966496,
/* 515 */ 2.0 *   28.8470852596585,
/* 516 */ 2.0 *   28.6998953476495,
/* 517 */ 2.0 *   28.5519812089713,
/* 518 */ 2.0 *    28.403346710908,
/* 519 */ 2.0 *   28.2539957395779,
/* 520 */ 2.0 *   28.1039321998315,
/* 521 */ 2.0 *   27.9531600151502,
/* 522 */ 2.0 *    27.801683127543,
/* 523 */ 2.0 *   27.6495054974435,
/* 524 */ 2.0 *   27.4966311036069,
/* 525 */ 2.0 *   27.3430639430054,
/* 526 */ 2.0 *   27.1888080307239,
/* 527 */ 2.0 *   27.0338673998552,
/* 528 */ 2.0 *   26.8782461013943,
/* 529 */ 2.0 *   26.7219482041324,
/* 530 */ 2.0 *    26.564977794551,
/* 531 */ 2.0 *   26.4073389767145,
/* 532 */ 2.0 *   26.2490358721633,
/* 533 */ 2.0 *   26.0900726198058,
/* 534 */ 2.0 *   25.9304533758102,
/* 535 */ 2.0 *   25.7701823134961,
/* 536 */ 2.0 *   25.6092636232251,
/* 537 */ 2.0 *   25.4477015122912,
/* 538 */ 2.0 *   25.2855002048113,
/* 539 */ 2.0 *   25.1226639416139,
/* 540 */ 2.0 *   24.9591969801292,
/* 541 */ 2.0 *   24.7951035942768,
/* 542 */ 2.0 *    24.630388074355,
/* 543 */ 2.0 *   24.4650547269276,
/* 544 */ 2.0 *   24.2991078747121,
/* 545 */ 2.0 *   24.1325518564662,
/* 546 */ 2.0 *   23.9653910268747,
/* 547 */ 2.0 *   23.7976297564353,
/* 548 */ 2.0 *   23.6292724313445,
/* 549 */ 2.0 *   23.4603234533832,
/* 550 */ 2.0 *   23.2907872398009,
/* 551 */ 2.0 *   23.1206682232011,
/* 552 */ 2.0 *   22.9499708514246,
/* 553 */ 2.0 *   22.7786995874338,
/* 554 */ 2.0 *   22.6068589091957,
/* 555 */ 2.0 *   22.4344533095649,
/* 556 */ 2.0 *    22.261487296166,
/* 557 */ 2.0 *   22.0879653912761,
/* 558 */ 2.0 *   21.9138921317062,
/* 559 */ 2.0 *   21.7392720686828,
/* 560 */ 2.0 *   21.5641097677289,
/* 561 */ 2.0 *   21.3884098085443,
/* 562 */ 2.0 *   21.2121767848864,
/* 563 */ 2.0 *   21.0354153044496,
/* 564 */ 2.0 *   20.8581299887453,
/* 565 */ 2.0 *   20.6803254729806,
/* 566 */ 2.0 *   20.5020064059374,
/* 567 */ 2.0 *   20.3231774498509,
/* 568 */ 2.0 *   20.1438432802872,
/* 569 */ 2.0 *    19.964008586022,
/* 570 */ 2.0 *    19.783678068917,
/* 571 */ 2.0 *   19.6028564437977,
/* 572 */ 2.0 *   19.4215484383296,
/* 573 */ 2.0 *   19.2397587928951,
/* 574 */ 2.0 *   19.0574922604691,
/* 575 */ 2.0 *    18.874753606495,
/* 576 */ 2.0 *   18.6915476087601,
/* 577 */ 2.0 *   18.5078790572705,
/* 578 */ 2.0 *   18.3237527541261,
/* 579 */ 2.0 *   18.1391735133949,
/* 580 */ 2.0 *    17.954146160987,
/* 581 */ 2.0 *    17.768675534529,
/* 582 */ 2.0 *   17.5827664832366,
/* 583 */ 2.0 *   17.3964238677886,
/* 584 */ 2.0 *   17.2096525601996,
/* 585 */ 2.0 *   17.0224574436924,
/* 586 */ 2.0 *   16.8348434125705,
/* 587 */ 2.0 *   16.6468153720902,
/* 588 */ 2.0 *   16.4583782383321,
/* 589 */ 2.0 *   16.2695369380731,
/* 590 */ 2.0 *   16.0802964086567,
/* 591 */ 2.0 *   15.8906615978649,
/* 592 */ 2.0 *   15.7006374637881,
/* 593 */ 2.0 *   15.5102289746959,
/* 594 */ 2.0 *   15.3194411089068,
/* 595 */ 2.0 *   15.1282788546586,
/* 596 */ 2.0 *   14.9367472099774,
/* 597 */ 2.0 *   14.7448511825473,
/* 598 */ 2.0 *   14.5525957895793,
/* 599 */ 2.0 *   14.3599860576804,
/* 600 */ 2.0 *   14.1670270227216,
/* 601 */ 2.0 *   13.9737237297068,
/* 602 */ 2.0 *   13.7800812326406,
/* 603 */ 2.0 *   13.5861045943965,
/* 604 */ 2.0 *   13.3917988865839,
/* 605 */ 2.0 *   13.1971691894161,
/* 606 */ 2.0 *   13.0022205915772,
/* 607 */ 2.0 *   12.8069581900892,
/* 608 */ 2.0 *   12.6113870901785,
/* 609 */ 2.0 *   12.4155124051426,
/* 610 */ 2.0 *   12.2193392562164,
/* 611 */ 2.0 *   12.0228727724383,
/* 612 */ 2.0 *   11.8261180905161,
/* 613 */ 2.0 *   11.6290803546925,
/* 614 */ 2.0 *    11.431764716611,
/* 615 */ 2.0 *   11.2341763351809,
/* 616 */ 2.0 *   11.0363203764424,
/* 617 */ 2.0 *   10.8382020134318,
/* 618 */ 2.0 *   10.6398264260459,
/* 619 */ 2.0 *    10.441198800907,
/* 620 */ 2.0 *   10.2423243312269,
/* 621 */ 2.0 *   10.0432082166711,
/* 622 */ 2.0 *   9.84385566322324,
/* 623 */ 2.0 *   9.64427188304878,
/* 624 */ 2.0 *   9.44446209435861,
/* 625 */ 2.0 *   9.24443152127274,
/* 626 */ 2.0 *   9.04418539368368,
/* 627 */ 2.0 *   8.84372894711975,
/* 628 */ 2.0 *   8.64306742260813,
/* 629 */ 2.0 *   8.44220606653786,
/* 630 */ 2.0 *    8.2411501305227,
/* 631 */ 2.0 *   8.03990487126374,
/* 632 */ 2.0 *   7.83847555041206,
/* 633 */ 2.0 *   7.63686743443107,
/* 634 */ 2.0 *   7.43508579445894,
/* 635 */ 2.0 *   7.23313590617061,
/* 636 */ 2.0 *   7.03102304964002,
/* 637 */ 2.0 *   6.82875250920198,
/* 638 */ 2.0 *   6.62632957331397,
/* 639 */ 2.0 *   6.42375953441799,
/* 640 */ 2.0 *   6.22104768880207,
/* 641 */ 2.0 *   6.01819933646185,
/* 642 */ 2.0 *   5.81521978096203,
/* 643 */ 2.0 *   5.61211432929763,
/* 644 */ 2.0 *   5.40888829175533,
/* 645 */ 2.0 *   5.20554698177454,
/* 646 */ 2.0 *   5.00209571580858,
/* 647 */ 2.0 *   4.79853981318557,
/* 648 */ 2.0 *   4.59488459596939,
/* 649 */ 2.0 *   4.39113538882064,
/* 650 */ 2.0 *   4.18729751885721,
/* 651 */ 2.0 *    3.9833763155152,
/* 652 */ 2.0 *   3.77937711040947,
/* 653 */ 2.0 *    3.5753052371943,
/* 654 */ 2.0 *   3.37116603142388,
/* 655 */ 2.0 *   3.16696483041283,
/* 656 */ 2.0 *   2.96270697309673,
/* 657 */ 2.0 *   2.75839779989238,
/* 658 */ 2.0 *   2.55404265255833,
/* 659 */ 2.0 *   2.34964687405511,
/* 660 */ 2.0 *   2.14521580840557,
/* 661 */ 2.0 *   1.94075480055516,
/* 662 */ 2.0 *   1.73626919623219,
/* 663 */ 2.0 *   1.53176434180807,
/* 664 */ 2.0 *   1.32724558415748,
/* 665 */ 2.0 *   1.12271827051864,
/* 666 */ 2.0 *  0.918187748353445,
/* 667 */ 2.0 *   0.71365936520767,
/* 668 */ 2.0 *  0.509138468571207,
/* 669 */ 2.0 *  0.304630405738164,
/* 670 */ 2.0 *  0.100140523667152,
/* 671 */ 2.0 * -0.104325831158636,
/* 672 */ 2.0 * -0.308763312871042,
/* 673 */ 2.0 * -0.513166576356893,
/* 674 */ 2.0 * -0.717530277397634,
/* 675 */ 2.0 * -0.921849072809072,
/* 676 */ 2.0 *  -1.12611762058113,
/* 677 */ 2.0 *  -1.33033058001742,
/* 678 */ 2.0 *  -1.53448261187503,
/* 679 */ 2.0 *  -1.73856837850393,
/* 680 */ 2.0 *  -1.94258254398669,
/* 681 */ 2.0 *  -2.14651977427791,
/* 682 */ 2.0 *  -2.35037473734365,
/* 683 */ 2.0 *  -2.55414210330098,
/* 684 */ 2.0 *  -2.75781654455715,
/* 685 */ 2.0 *    -2.961392735949,
/* 686 */ 2.0 *  -3.16486535488218,
/* 687 */ 2.0 *  -3.36822908147025,
/* 688 */ 2.0 *  -3.57147859867385,
/* 689 */ 2.0 *  -3.77460859243965,
/* 690 */ 2.0 *  -3.97761375183933,
/* 691 */ 2.0 *  -4.18048876920841,
/* 692 */ 2.0 *  -4.38322834028504,
/* 693 */ 2.0 *   -4.5858271643487,
/* 694 */ 2.0 *  -4.78827994435871,
/* 695 */ 2.0 *  -4.99058138709286,
/* 696 */ 2.0 *  -5.19272620328564,
/* 697 */ 2.0 *  -5.39470910776667,
/* 698 */ 2.0 *   -5.5965248195988,
/* 699 */ 2.0 *  -5.79816806221621,
/* 700 */ 2.0 *  -5.99963356356241,
/* 701 */ 2.0 *  -6.20091605622798,
/* 702 */ 2.0 *  -6.40201027758838,
/* 703 */ 2.0 *  -6.60291096994149,
/* 704 */ 2.0 *  -6.80361288064512,
/* 705 */ 2.0 *  -7.00411076225432,
/* 706 */ 2.0 *  -7.20439937265855,
/* 707 */ 2.0 *  -7.40447347521878,
/* 708 */ 2.0 *  -7.60432783890439,
/* 709 */ 2.0 *  -7.80395723842992,
/* 710 */ 2.0 *  -8.00335645439171,
/* 711 */ 2.0 *  -8.20252027340437,
/* 712 */ 2.0 *  -8.40144348823707,
/* 713 */ 2.0 *  -8.60012089794965,
/* 714 */ 2.0 *  -8.79854730802871,
/* 715 */ 2.0 *  -8.99671753052328,
/* 716 */ 2.0 *  -9.19462638418059,
/* 717 */ 2.0 *  -9.39226869458142,
/* 718 */ 2.0 *  -9.58963929427552,
/* 719 */ 2.0 *   -9.7867330229166,
/* 720 */ 2.0 *  -9.98354472739729,
/* 721 */ 2.0 *  -10.1800692619839,
/* 722 */ 2.0 *  -10.3763014884509
};

/*
* A = 13
* B = 12
* C = 40
* DMM = Decimi di millimetro
* Teta = 195 - ARCSEN ((DMM - A + B) / C )
*/
#define DMM_TBL_MIN -104
#define DMM_TBL_MAX  410

static uint16_t sat_from_dmm_to_bits[] = {
/*         0  -10.4000  211.5588 */ 722,
/*    1.0000  -10.3000  211.4095 */ 722,
/*    2.0000  -10.2000  211.2602 */ 721,
/*    3.0000  -10.1000  211.1111 */ 721,
/*    4.0000  -10.0000  210.9620 */ 720,
/*    5.0000   -9.9000  210.8131 */ 720,
/*    6.0000   -9.8000  210.6643 */ 719,
/*    7.0000   -9.7000  210.5156 */ 719,
/*    8.0000   -9.6000  210.3670 */ 718,
/*    9.0000   -9.5000  210.2185 */ 718,
/*   10.0000   -9.4000  210.0701 */ 717,
/*   11.0000   -9.3000  209.9218 */ 717,
/*   12.0000   -9.2000  209.7736 */ 716,
/*   13.0000   -9.1000  209.6255 */ 716,
/*   14.0000   -9.0000  209.4775 */ 715,
/*   15.0000   -8.9000  209.3296 */ 715,
/*   16.0000   -8.8000  209.1818 */ 714,
/*   17.0000   -8.7000  209.0341 */ 714,
/*   18.0000   -8.6000  208.8865 */ 713,
/*   19.0000   -8.5000  208.7390 */ 712,
/*   20.0000   -8.4000  208.5916 */ 712,
/*   21.0000   -8.3000  208.4443 */ 711,
/*   22.0000   -8.2000  208.2971 */ 711,
/*   23.0000   -8.1000  208.1499 */ 710,
/*   24.0000   -8.0000  208.0029 */ 710,
/*   25.0000   -7.9000  207.8559 */ 709,
/*   26.0000   -7.8000  207.7090 */ 709,
/*   27.0000   -7.7000  207.5622 */ 708,
/*   28.0000   -7.6000  207.4155 */ 708,
/*   29.0000   -7.5000  207.2689 */ 707,
/*   30.0000   -7.4000  207.1224 */ 707,
/*   31.0000   -7.3000  206.9759 */ 706,
/*   32.0000   -7.2000  206.8295 */ 706,
/*   33.0000   -7.1000  206.6832 */ 705,
/*   34.0000   -7.0000  206.5370 */ 705,
/*   35.0000   -6.9000  206.3908 */ 704,
/*   36.0000   -6.8000  206.2447 */ 704,
/*   37.0000   -6.7000  206.0987 */ 703,
/*   38.0000   -6.6000  205.9528 */ 703,
/*   39.0000   -6.5000  205.8069 */ 702,
/*   40.0000   -6.4000  205.6611 */ 702,
/*   41.0000   -6.3000  205.5154 */ 701,
/*   42.0000   -6.2000  205.3698 */ 701,
/*   43.0000   -6.1000  205.2242 */ 700,
/*   44.0000   -6.0000  205.0787 */ 700,
/*   45.0000   -5.9000  204.9332 */ 700,
/*   46.0000   -5.8000  204.7878 */ 699,
/*   47.0000   -5.7000  204.6425 */ 699,
/*   48.0000   -5.6000  204.4972 */ 698,
/*   49.0000   -5.5000  204.3520 */ 698,
/*   50.0000   -5.4000  204.2069 */ 697,
/*   51.0000   -5.3000  204.0618 */ 697,
/*   52.0000   -5.2000  203.9168 */ 696,
/*   53.0000   -5.1000  203.7718 */ 696,
/*   54.0000   -5.0000  203.6269 */ 695,
/*   55.0000   -4.9000  203.4821 */ 695,
/*   56.0000   -4.8000  203.3373 */ 694,
/*   57.0000   -4.7000  203.1925 */ 694,
/*   58.0000   -4.6000  203.0478 */ 693,
/*   59.0000   -4.5000  202.9032 */ 693,
/*   60.0000   -4.4000  202.7586 */ 692,
/*   61.0000   -4.3000  202.6141 */ 692,
/*   62.0000   -4.2000  202.4696 */ 691,
/*   63.0000   -4.1000  202.3252 */ 691,
/*   64.0000   -4.0000  202.1808 */ 690,
/*   65.0000   -3.9000  202.0364 */ 690,
/*   66.0000   -3.8000  201.8921 */ 689,
/*   67.0000   -3.7000  201.7478 */ 689,
/*   68.0000   -3.6000  201.6036 */ 688,
/*   69.0000   -3.5000  201.4594 */ 688,
/*   70.0000   -3.4000  201.3153 */ 687,
/*   71.0000   -3.3000  201.1712 */ 687,
/*   72.0000   -3.2000  201.0272 */ 686,
/*   73.0000   -3.1000  200.8831 */ 686,
/*   74.0000   -3.0000  200.7392 */ 685,
/*   75.0000   -2.9000  200.5952 */ 685,
/*   76.0000   -2.8000  200.4513 */ 684,
/*   77.0000   -2.7000  200.3074 */ 684,
/*   78.0000   -2.6000  200.1636 */ 683,
/*   79.0000   -2.5000  200.0198 */ 683,
/*   80.0000   -2.4000  199.8760 */ 682,
/*   81.0000   -2.3000  199.7323 */ 682,
/*   82.0000   -2.2000  199.5886 */ 681,
/*   83.0000   -2.1000  199.4449 */ 681,
/*   84.0000   -2.0000  199.3012 */ 680,
/*   85.0000   -1.9000  199.1576 */ 680,
/*   86.0000   -1.8000  199.0140 */ 679,
/*   87.0000   -1.7000  198.8704 */ 679,
/*   88.0000   -1.6000  198.7269 */ 678,
/*   89.0000   -1.5000  198.5833 */ 678,
/*   90.0000   -1.4000  198.4398 */ 677,
/*   91.0000   -1.3000  198.2963 */ 677,
/*   92.0000   -1.2000  198.1529 */ 676,
/*   93.0000   -1.1000  198.0094 */ 676,
/*   94.0000   -1.0000  197.8660 */ 675,
/*   95.0000   -0.9000  197.7226 */ 675,
/*   96.0000   -0.8000  197.5792 */ 674,
/*   97.0000   -0.7000  197.4358 */ 674,
/*   98.0000   -0.6000  197.2924 */ 673,
/*   99.0000   -0.5000  197.1491 */ 673,
/*  100.0000   -0.4000  197.0058 */ 672,
/*  101.0000   -0.3000  196.8624 */ 672,
/*  102.0000   -0.2000  196.7191 */ 671,
/*  103.0000   -0.1000  196.5758 */ 671,
/*  104.0000         0  196.4325 */ 670,
/*  105.0000    0.1000  196.2893 */ 670,
/*  106.0000    0.2000  196.1460 */ 670,
/*  107.0000    0.3000  196.0027 */ 669,
/*  108.0000    0.4000  195.8595 */ 669,
/*  109.0000    0.5000  195.7162 */ 668,
/*  110.0000    0.6000  195.5730 */ 668,
/*  111.0000    0.7000  195.4297 */ 667,
/*  112.0000    0.8000  195.2865 */ 667,
/*  113.0000    0.9000  195.1432 */ 666,
/*  114.0000    1.0000  195.0000 */ 666,
/*  115.0000    1.1000  194.8568 */ 665,
/*  116.0000    1.2000  194.7135 */ 665,
/*  117.0000    1.3000  194.5703 */ 664,
/*  118.0000    1.4000  194.4270 */ 664,
/*  119.0000    1.5000  194.2838 */ 663,
/*  120.0000    1.6000  194.1405 */ 663,
/*  121.0000    1.7000  193.9973 */ 662,
/*  122.0000    1.8000  193.8540 */ 662,
/*  123.0000    1.9000  193.7107 */ 661,
/*  124.0000    2.0000  193.5675 */ 661,
/*  125.0000    2.1000  193.4242 */ 660,
/*  126.0000    2.2000  193.2809 */ 660,
/*  127.0000    2.3000  193.1376 */ 659,
/*  128.0000    2.4000  192.9942 */ 659,
/*  129.0000    2.5000  192.8509 */ 658,
/*  130.0000    2.6000  192.7076 */ 658,
/*  131.0000    2.7000  192.5642 */ 657,
/*  132.0000    2.8000  192.4208 */ 657,
/*  133.0000    2.9000  192.2774 */ 656,
/*  134.0000    3.0000  192.1340 */ 656,
/*  135.0000    3.1000  191.9906 */ 655,
/*  136.0000    3.2000  191.8471 */ 655,
/*  137.0000    3.3000  191.7037 */ 654,
/*  138.0000    3.4000  191.5602 */ 654,
/*  139.0000    3.5000  191.4167 */ 653,
/*  140.0000    3.6000  191.2731 */ 653,
/*  141.0000    3.7000  191.1296 */ 652,
/*  142.0000    3.8000  190.9860 */ 652,
/*  143.0000    3.9000  190.8424 */ 651,
/*  144.0000    4.0000  190.6988 */ 651,
/*  145.0000    4.1000  190.5551 */ 650,
/*  146.0000    4.2000  190.4114 */ 650,
/*  147.0000    4.3000  190.2677 */ 649,
/*  148.0000    4.4000  190.1240 */ 649,
/*  149.0000    4.5000  189.9802 */ 648,
/*  150.0000    4.6000  189.8364 */ 648,
/*  151.0000    4.7000  189.6926 */ 647,
/*  152.0000    4.8000  189.5487 */ 647,
/*  153.0000    4.9000  189.4048 */ 647,
/*  154.0000    5.0000  189.2608 */ 646,
/*  155.0000    5.1000  189.1169 */ 646,
/*  156.0000    5.2000  188.9728 */ 645,
/*  157.0000    5.3000  188.8288 */ 645,
/*  158.0000    5.4000  188.6847 */ 644,
/*  159.0000    5.5000  188.5406 */ 644,
/*  160.0000    5.6000  188.3964 */ 643,
/*  161.0000    5.7000  188.2522 */ 643,
/*  162.0000    5.8000  188.1079 */ 642,
/*  163.0000    5.9000  187.9636 */ 642,
/*  164.0000    6.0000  187.8192 */ 641,
/*  165.0000    6.1000  187.6748 */ 641,
/*  166.0000    6.2000  187.5304 */ 640,
/*  167.0000    6.3000  187.3859 */ 640,
/*  168.0000    6.4000  187.2414 */ 639,
/*  169.0000    6.5000  187.0968 */ 639,
/*  170.0000    6.6000  186.9522 */ 638,
/*  171.0000    6.7000  186.8075 */ 638,
/*  172.0000    6.8000  186.6627 */ 637,
/*  173.0000    6.9000  186.5179 */ 637,
/*  174.0000    7.0000  186.3731 */ 636,
/*  175.0000    7.1000  186.2282 */ 636,
/*  176.0000    7.2000  186.0832 */ 635,
/*  177.0000    7.3000  185.9382 */ 635,
/*  178.0000    7.4000  185.7931 */ 634,
/*  179.0000    7.5000  185.6480 */ 634,
/*  180.0000    7.6000  185.5028 */ 633,
/*  181.0000    7.7000  185.3575 */ 633,
/*  182.0000    7.8000  185.2122 */ 632,
/*  183.0000    7.9000  185.0668 */ 632,
/*  184.0000    8.0000  184.9213 */ 631,
/*  185.0000    8.1000  184.7758 */ 631,
/*  186.0000    8.2000  184.6302 */ 630,
/*  187.0000    8.3000  184.4846 */ 630,
/*  188.0000    8.4000  184.3389 */ 629,
/*  189.0000    8.5000  184.1931 */ 629,
/*  190.0000    8.6000  184.0472 */ 628,
/*  191.0000    8.7000  183.9013 */ 628,
/*  192.0000    8.8000  183.7553 */ 627,
/*  193.0000    8.9000  183.6092 */ 627,
/*  194.0000    9.0000  183.4630 */ 626,
/*  195.0000    9.1000  183.3168 */ 626,
/*  196.0000    9.2000  183.1705 */ 625,
/*  197.0000    9.3000  183.0241 */ 625,
/*  198.0000    9.4000  182.8776 */ 624,
/*  199.0000    9.5000  182.7311 */ 624,
/*  200.0000    9.6000  182.5845 */ 623,
/*  201.0000    9.7000  182.4378 */ 623,
/*  202.0000    9.8000  182.2910 */ 622,
/*  203.0000    9.9000  182.1441 */ 622,
/*  204.0000   10.0000  181.9971 */ 621,
/*  205.0000   10.1000  181.8501 */ 621,
/*  206.0000   10.2000  181.7029 */ 620,
/*  207.0000   10.3000  181.5557 */ 620,
/*  208.0000   10.4000  181.4084 */ 619,
/*  209.0000   10.5000  181.2610 */ 619,
/*  210.0000   10.6000  181.1135 */ 618,
/*  211.0000   10.7000  180.9659 */ 618,
/*  212.0000   10.8000  180.8182 */ 617,
/*  213.0000   10.9000  180.6704 */ 617,
/*  214.0000   11.0000  180.5225 */ 616,
/*  215.0000   11.1000  180.3745 */ 616,
/*  216.0000   11.2000  180.2264 */ 615,
/*  217.0000   11.3000  180.0782 */ 615,
/*  218.0000   11.4000  179.9299 */ 614,
/*  219.0000   11.5000  179.7815 */ 614,
/*  220.0000   11.6000  179.6330 */ 613,
/*  221.0000   11.7000  179.4844 */ 613,
/*  222.0000   11.8000  179.3357 */ 612,
/*  223.0000   11.9000  179.1869 */ 612,
/*  224.0000   12.0000  179.0380 */ 611,
/*  225.0000   12.1000  178.8889 */ 611,
/*  226.0000   12.2000  178.7398 */ 610,
/*  227.0000   12.3000  178.5905 */ 610,
/*  228.0000   12.4000  178.4412 */ 609,
/*  229.0000   12.5000  178.2917 */ 609,
/*  230.0000   12.6000  178.1420 */ 608,
/*  231.0000   12.7000  177.9923 */ 608,
/*  232.0000   12.8000  177.8425 */ 607,
/*  233.0000   12.9000  177.6925 */ 607,
/*  234.0000   13.0000  177.5424 */ 606,
/*  235.0000   13.1000  177.3922 */ 605,
/*  236.0000   13.2000  177.2418 */ 605,
/*  237.0000   13.3000  177.0914 */ 604,
/*  238.0000   13.4000  176.9408 */ 604,
/*  239.0000   13.5000  176.7900 */ 603,
/*  240.0000   13.6000  176.6392 */ 603,
/*  241.0000   13.7000  176.4882 */ 602,
/*  242.0000   13.8000  176.3371 */ 602,
/*  243.0000   13.9000  176.1858 */ 601,
/*  244.0000   14.0000  176.0344 */ 601,
/*  245.0000   14.1000  175.8829 */ 600,
/*  246.0000   14.2000  175.7312 */ 600,
/*  247.0000   14.3000  175.5794 */ 599,
/*  248.0000   14.4000  175.4275 */ 599,
/*  249.0000   14.5000  175.2754 */ 598,
/*  250.0000   14.6000  175.1231 */ 598,
/*  251.0000   14.7000  174.9707 */ 597,
/*  252.0000   14.8000  174.8182 */ 597,
/*  253.0000   14.9000  174.6655 */ 596,
/*  254.0000   15.0000  174.5127 */ 596,
/*  255.0000   15.1000  174.3597 */ 595,
/*  256.0000   15.2000  174.2066 */ 595,
/*  257.0000   15.3000  174.0533 */ 594,
/*  258.0000   15.4000  173.8998 */ 594,
/*  259.0000   15.5000  173.7462 */ 593,
/*  260.0000   15.6000  173.5924 */ 593,
/*  261.0000   15.7000  173.4385 */ 592,
/*  262.0000   15.8000  173.2844 */ 591,
/*  263.0000   15.9000  173.1301 */ 591,
/*  264.0000   16.0000  172.9757 */ 590,
/*  265.0000   16.1000  172.8211 */ 590,
/*  266.0000   16.2000  172.6663 */ 589,
/*  267.0000   16.3000  172.5114 */ 589,
/*  268.0000   16.4000  172.3563 */ 588,
/*  269.0000   16.5000  172.2010 */ 588,
/*  270.0000   16.6000  172.0455 */ 587,
/*  271.0000   16.7000  171.8899 */ 587,
/*  272.0000   16.8000  171.7340 */ 586,
/*  273.0000   16.9000  171.5780 */ 586,
/*  274.0000   17.0000  171.4218 */ 585,
/*  275.0000   17.1000  171.2654 */ 585,
/*  276.0000   17.2000  171.1089 */ 584,
/*  277.0000   17.3000  170.9521 */ 584,
/*  278.0000   17.4000  170.7952 */ 583,
/*  279.0000   17.5000  170.6380 */ 582,
/*  280.0000   17.6000  170.4807 */ 582,
/*  281.0000   17.7000  170.3231 */ 581,
/*  282.0000   17.8000  170.1654 */ 581,
/*  283.0000   17.9000  170.0075 */ 580,
/*  284.0000   18.0000  169.8493 */ 580,
/*  285.0000   18.1000  169.6910 */ 579,
/*  286.0000   18.2000  169.5324 */ 579,
/*  287.0000   18.3000  169.3737 */ 578,
/*  288.0000   18.4000  169.2147 */ 578,
/*  289.0000   18.5000  169.0555 */ 577,
/*  290.0000   18.6000  168.8961 */ 576,
/*  291.0000   18.7000  168.7365 */ 576,
/*  292.0000   18.8000  168.5767 */ 575,
/*  293.0000   18.9000  168.4166 */ 575,
/*  294.0000   19.0000  168.2563 */ 574,
/*  295.0000   19.1000  168.0958 */ 574,
/*  296.0000   19.2000  167.9351 */ 573,
/*  297.0000   19.3000  167.7741 */ 573,
/*  298.0000   19.4000  167.6129 */ 572,
/*  299.0000   19.5000  167.4515 */ 572,
/*  300.0000   19.6000  167.2898 */ 571,
/*  301.0000   19.7000  167.1279 */ 570,
/*  302.0000   19.8000  166.9657 */ 570,
/*  303.0000   19.9000  166.8033 */ 569,
/*  304.0000   20.0000  166.6406 */ 569,
/*  305.0000   20.1000  166.4778 */ 568,
/*  306.0000   20.2000  166.3146 */ 568,
/*  307.0000   20.3000  166.1512 */ 567,
/*  308.0000   20.4000  165.9875 */ 567,
/*  309.0000   20.5000  165.8236 */ 566,
/*  310.0000   20.6000  165.6594 */ 565,
/*  311.0000   20.7000  165.4950 */ 565,
/*  312.0000   20.8000  165.3302 */ 564,
/*  313.0000   20.9000  165.1653 */ 564,
/*  314.0000   21.0000  165.0000 */ 563,
/*  315.0000   21.1000  164.8345 */ 563,
/*  316.0000   21.2000  164.6686 */ 562,
/*  317.0000   21.3000  164.5026 */ 562,
/*  318.0000   21.4000  164.3362 */ 561,
/*  319.0000   21.5000  164.1695 */ 560,
/*  320.0000   21.6000  164.0025 */ 560,
/*  321.0000   21.7000  163.8353 */ 559,
/*  322.0000   21.8000  163.6677 */ 559,
/*  323.0000   21.9000  163.4999 */ 558,
/*  324.0000   22.0000  163.3318 */ 558,
/*  325.0000   22.1000  163.1633 */ 557,
/*  326.0000   22.2000  162.9945 */ 556,
/*  327.0000   22.3000  162.8255 */ 556,
/*  328.0000   22.4000  162.6561 */ 555,
/*  329.0000   22.5000  162.4864 */ 555,
/*  330.0000   22.6000  162.3164 */ 554,
/*  331.0000   22.7000  162.1460 */ 553,
/*  332.0000   22.8000  161.9753 */ 553,
/*  333.0000   22.9000  161.8043 */ 552,
/*  334.0000   23.0000  161.6330 */ 552,
/*  335.0000   23.1000  161.4613 */ 551,
/*  336.0000   23.2000  161.2893 */ 551,
/*  337.0000   23.3000  161.1169 */ 550,
/*  338.0000   23.4000  160.9442 */ 549,
/*  339.0000   23.5000  160.7711 */ 549,
/*  340.0000   23.6000  160.5977 */ 548,
/*  341.0000   23.7000  160.4239 */ 548,
/*  342.0000   23.8000  160.2498 */ 547,
/*  343.0000   23.9000  160.0753 */ 546,
/*  344.0000   24.0000  159.9004 */ 546,
/*  345.0000   24.1000  159.7251 */ 545,
/*  346.0000   24.2000  159.5495 */ 545,
/*  347.0000   24.3000  159.3734 */ 544,
/*  348.0000   24.4000  159.1970 */ 543,
/*  349.0000   24.5000  159.0202 */ 543,
/*  350.0000   24.6000  158.8430 */ 542,
/*  351.0000   24.7000  158.6654 */ 542,
/*  352.0000   24.8000  158.4874 */ 541,
/*  353.0000   24.9000  158.3089 */ 540,
/*  354.0000   25.0000  158.1301 */ 540,
/*  355.0000   25.1000  157.9508 */ 539,
/*  356.0000   25.2000  157.7712 */ 539,
/*  357.0000   25.3000  157.5910 */ 538,
/*  358.0000   25.4000  157.4105 */ 537,
/*  359.0000   25.5000  157.2295 */ 537,
/*  360.0000   25.6000  157.0481 */ 536,
/*  361.0000   25.7000  156.8662 */ 535,
/*  362.0000   25.8000  156.6839 */ 535,
/*  363.0000   25.9000  156.5011 */ 534,
/*  364.0000   26.0000  156.3178 */ 534,
/*  365.0000   26.1000  156.1341 */ 533,
/*  366.0000   26.2000  155.9499 */ 532,
/*  367.0000   26.3000  155.7652 */ 532,
/*  368.0000   26.4000  155.5800 */ 531,
/*  369.0000   26.5000  155.3943 */ 530,
/*  370.0000   26.6000  155.2082 */ 530,
/*  371.0000   26.7000  155.0215 */ 529,
/*  372.0000   26.8000  154.8343 */ 529,
/*  373.0000   26.9000  154.6466 */ 528,
/*  374.0000   27.0000  154.4584 */ 527,
/*  375.0000   27.1000  154.2696 */ 527,
/*  376.0000   27.2000  154.0804 */ 526,
/*  377.0000   27.3000  153.8905 */ 525,
/*  378.0000   27.4000  153.7001 */ 525,
/*  379.0000   27.5000  153.5092 */ 524,
/*  380.0000   27.6000  153.3177 */ 523,
/*  381.0000   27.7000  153.1256 */ 523,
/*  382.0000   27.8000  152.9329 */ 522,
/*  383.0000   27.9000  152.7397 */ 521,
/*  384.0000   28.0000  152.5458 */ 521,
/*  385.0000   28.1000  152.3514 */ 520,
/*  386.0000   28.2000  152.1564 */ 519,
/*  387.0000   28.3000  151.9607 */ 519,
/*  388.0000   28.4000  151.7644 */ 518,
/*  389.0000   28.5000  151.5675 */ 517,
/*  390.0000   28.6000  151.3699 */ 517,
/*  391.0000   28.7000  151.1717 */ 516,
/*  392.0000   28.8000  150.9728 */ 515,
/*  393.0000   28.9000  150.7732 */ 515,
/*  394.0000   29.0000  150.5730 */ 514,
/*  395.0000   29.1000  150.3721 */ 513,
/*  396.0000   29.2000  150.1705 */ 513,
/*  397.0000   29.3000  149.9681 */ 512,
/*  398.0000   29.4000  149.7651 */ 511,
/*  399.0000   29.5000  149.5613 */ 511,
/*  400.0000   29.6000  149.3568 */ 510,
/*  401.0000   29.7000  149.1515 */ 509,
/*  402.0000   29.8000  148.9455 */ 508,
/*  403.0000   29.9000  148.7387 */ 508,
/*  404.0000   30.0000  148.5312 */ 507,
/*  405.0000   30.1000  148.3228 */ 506,
/*  406.0000   30.2000  148.1136 */ 506,
/*  407.0000   30.3000  147.9036 */ 505,
/*  408.0000   30.4000  147.6928 */ 504,
/*  409.0000   30.5000  147.4811 */ 503,
/*  410.0000   30.6000  147.2686 */ 503,
/*  411.0000   30.7000  147.0552 */ 502,
/*  412.0000   30.8000  146.8409 */ 501,
/*  413.0000   30.9000  146.6257 */ 500,
/*  414.0000   31.0000  146.4096 */ 500,
/*  415.0000   31.1000  146.1926 */ 499,
/*  416.0000   31.2000  145.9746 */ 498,
/*  417.0000   31.3000  145.7557 */ 498,
/*  418.0000   31.4000  145.5358 */ 497,
/*  419.0000   31.5000  145.3149 */ 496,
/*  420.0000   31.6000  145.0930 */ 495,
/*  421.0000   31.7000  144.8701 */ 494,
/*  422.0000   31.8000  144.6461 */ 494,
/*  423.0000   31.9000  144.4211 */ 493,
/*  424.0000   32.0000  144.1950 */ 492,
/*  425.0000   32.1000  143.9678 */ 491,
/*  426.0000   32.2000  143.7394 */ 491,
/*  427.0000   32.3000  143.5100 */ 490,
/*  428.0000   32.4000  143.2793 */ 489,
/*  429.0000   32.5000  143.0475 */ 488,
/*  430.0000   32.6000  142.8145 */ 487,
/*  431.0000   32.7000  142.5802 */ 487,
/*  432.0000   32.8000  142.3447 */ 486,
/*  433.0000   32.9000  142.1080 */ 485,
/*  434.0000   33.0000  141.8699 */ 484,
/*  435.0000   33.1000  141.6305 */ 483,
/*  436.0000   33.2000  141.3897 */ 483,
/*  437.0000   33.3000  141.1476 */ 482,
/*  438.0000   33.4000  140.9041 */ 481,
/*  439.0000   33.5000  140.6591 */ 480,
/*  440.0000   33.6000  140.4126 */ 479,
/*  441.0000   33.7000  140.1647 */ 478,
/*  442.0000   33.8000  139.9152 */ 478,
/*  443.0000   33.9000  139.6642 */ 477,
/*  444.0000   34.0000  139.4115 */ 476,
/*  445.0000   34.1000  139.1572 */ 475,
/*  446.0000   34.2000  138.9013 */ 474,
/*  447.0000   34.3000  138.6436 */ 473,
/*  448.0000   34.4000  138.3842 */ 472,
/*  449.0000   34.5000  138.1229 */ 471,
/*  450.0000   34.6000  137.8599 */ 471,
/*  451.0000   34.7000  137.5949 */ 470,
/*  452.0000   34.8000  137.3281 */ 469,
/*  453.0000   34.9000  137.0592 */ 468,
/*  454.0000   35.0000  136.7883 */ 467,
/*  455.0000   35.1000  136.5154 */ 466,
/*  456.0000   35.2000  136.2403 */ 465,
/*  457.0000   35.3000  135.9630 */ 464,
/*  458.0000   35.4000  135.6834 */ 463,
/*  459.0000   35.5000  135.4015 */ 462,
/*  460.0000   35.6000  135.1173 */ 461,
/*  461.0000   35.7000  134.8306 */ 460,
/*  462.0000   35.8000  134.5414 */ 459,
/*  463.0000   35.9000  134.2495 */ 458,
/*  464.0000   36.0000  133.9550 */ 457,
/*  465.0000   36.1000  133.6578 */ 456,
/*  466.0000   36.2000  133.3576 */ 455,
/*  467.0000   36.3000  133.0546 */ 454,
/*  468.0000   36.4000  132.7485 */ 453,
/*  469.0000   36.5000  132.4392 */ 452,
/*  470.0000   36.6000  132.1268 */ 451,
/*  471.0000   36.7000  131.8109 */ 450,
/*  472.0000   36.8000  131.4916 */ 449,
/*  473.0000   36.9000  131.1686 */ 448,
/*  474.0000   37.0000  130.8419 */ 447,
/*  475.0000   37.1000  130.5113 */ 445,
/*  476.0000   37.2000  130.1767 */ 444,
/*  477.0000   37.3000  129.8379 */ 443,
/*  478.0000   37.4000  129.4946 */ 442,
/*  479.0000   37.5000  129.1468 */ 441,
/*  480.0000   37.6000  128.7943 */ 440,
/*  481.0000   37.7000  128.4367 */ 438,
/*  482.0000   37.8000  128.0739 */ 437,
/*  483.0000   37.9000  127.7057 */ 436,
/*  484.0000   38.0000  127.3316 */ 435,
/*  485.0000   38.1000  126.9516 */ 433,
/*  486.0000   38.2000  126.5652 */ 432,
/*  487.0000   38.3000  126.1721 */ 431,
/*  488.0000   38.4000  125.7719 */ 429,
/*  489.0000   38.5000  125.3641 */ 428,
/*  490.0000   38.6000  124.9484 */ 426,
/*  491.0000   38.7000  124.5243 */ 425,
/*  492.0000   38.8000  124.0911 */ 424,
/*  493.0000   38.9000  123.6482 */ 422,
/*  494.0000   39.0000  123.1949 */ 421,
/*  495.0000   39.1000  122.7304 */ 419,
/*  496.0000   39.2000  122.2539 */ 417,
/*  497.0000   39.3000  121.7642 */ 416,
/*  498.0000   39.4000  121.2602 */ 414,
/*  499.0000   39.5000  120.7405 */ 412,
/*  500.0000   39.6000  120.2036 */ 410,
/*  501.0000   39.7000  119.6475 */ 408,
/*  502.0000   39.8000  119.0699 */ 406,
/*  503.0000   39.9000  118.4680 */ 404,
/*  504.0000   40.0000  117.8386 */ 402,
/*  505.0000   40.1000  117.1772 */ 400,
/*  506.0000   40.2000  116.4783 */ 398,
/*  507.0000   40.3000  115.7348 */ 395,
/*  508.0000   40.4000  114.9364 */ 392,
/*  509.0000   40.5000  114.0687 */ 389,
/*  510.0000   40.6000  113.1096 */ 386,
/*  511.0000   40.7000  112.0217 */ 382,
/*  512.0000   40.8000  110.7320 */ 378,
/*  513.0000   40.9000  109.0523 */ 372,
/*  514.0000   41.0000  105.0000 */ 358
};

#define TORQUE_LIMITATION_VALUE 0x14F

void
dynamixel_node(
    void* arg
)
{
    (void)arg;

    core::mw::Node node("dynamixel_sub");
    core::mw::Publisher<core::dynamixel_msgs::DynamixelServoMsg>        servo_pub;
    core::mw::Subscriber<core::dynamixel_msgs::DynamixelCommandMsg, 2>  command_sub;

    core::dynamixel_msgs::DynamixelServoMsg*    servo_msgp;
    core::dynamixel_msgs::DynamixelCommandMsg*  command_msgp;
    core::os::Time  last_time;
    core::os::Time  delta_time;
    bool            sb_state;
    uint16_t        st_spare;
    uint8_t         sd_error;
    core::os::Time  ms100_timestamp = core::os::Time::ms(100);
    core::os::Time  ms5_timestamp = core::os::Time::ms(5);
//    core::os::Time  ms2_timestamp = core::os::Time::ms(2);
    core::os::Time  now2;
    core::dynamixel_driver::Servo* servo = 0;
    core::dynamixel_msgs::DynamixelCommandMsg sx_last_Target;
    chRegSetThreadName("dynamixel_sub");

    node.advertise(servo_pub, "dynamixel_servo");
    node.subscribe(command_sub, "dynamixel_cmd");

    core::dynamixel_driver::Network& dynet = Module::servo_network;

    core::os::Thread::sleep(core::os::Time::ms(1000));
    
    dynet.start(0);

    chThdSleepMilliseconds(100);

#if YOU_WANT_TO_SET_THE_BAUDRATE
    uint8_t baudrate = 1; // 1 = 1000000 7 = 250000
    dynet.writeData(0xFE, core::dynamixel_driver::address::BAUDRATE, &baudrate, 1);
#endif

    bool has_servo = false;
    while(!has_servo) {
#if 1  
      // Standard code to discover the ID of the connected dinamixel  
      uint8_t id = 0xFF;
      while ((id = dynet.scan(id)) != 0xFF) {
        if (id == GRIPPER_SERVO)
        {
          servo = new core::dynamixel_driver::Servo(dynet, id);
          has_servo = true;
          break;
        }
      }
#else
      // We know that the dinamixel has always ID = 1
      {
        uint8_t id = GRIPPER_SERVO;
        servo = new core::dynamixel_driver::Servo(dynet, id);
        has_servo = true;
      }
#endif
      if (!has_servo) {
        Module::led_red.set();
        core::os::Thread::sleep(core::os::Time::ms(500));
        Module::led_red.clear();
      }
    }
//    servo->setComplianceSlope(true,  32);  // CW 
    servo->setComplianceSlope(false, 0); // CCW
    servo->setComplianceMargin(true,  0); // CW 
    servo->setComplianceMargin(false, 0); // CCW
    servo->setSpeed(0);  // Set the Speed
//    servo->setPunch(0);  // Set the Speed
    servo->setAngleLimit(true,  358); // 105 gradi CW
    servo->setAngleLimit(false, ENCODER_TBL_MAX); // 285 gradi - era 668 ovvero: 195 gradi CCW
    servo->setAlarmShutdown(0x04); // Set OverHeating Error and OverLoad Error
    st_spare = TORQUE_LIMITATION_VALUE; // 180528 VP Limit the max Torque in order to avoid saturation when the gun is closed, this limits the current at 220mA
    servo->setTorqueLimit(st_spare);
    // Enable the Torque control
    servo->enable();

    now2 = last_time = core::os::Time::now();
    while (1) {
      if (node.spin(ms5_timestamp)) {
        sb_state = false;
        // Rimuovo dalla coda tutti i target, ma invio a Dynamixel solo l'ultimo ricevuto
        while (command_sub.fetch(command_msgp)) {
          sb_state = true; // Almeno un target ricevuto
          sx_last_Target = *command_msgp;
          command_sub.release(*command_msgp);
        }
        // Se e' stato ricevuto almeno un target
        if (sb_state == true)
        { // Invia a Dynamixel solo l'ultimo target che e' stato ricevuto
          
//          servo->setSpeed((uint16_t)sx_last_Target.speed);  // Set the Speed
          {
            int16_t  ss_value;
            /* Passo da MM di apertura pinza a Decimi di MM di semiapertura pinza */
            ss_value = round(sx_last_Target.position  * (10.0 / 2.0));
            if (ss_value < DMM_TBL_MIN)
              ss_value = DMM_TBL_MIN;
            if (ss_value > DMM_TBL_MAX)
              ss_value = DMM_TBL_MAX;

            servo->setPosition(sat_from_dmm_to_bits[ss_value - DMM_TBL_MIN]); // Set the Position
          }
        }
      }

      now2 = core::os::Time::now(); // Timestamp
      if (now2 < last_time)
        last_time = now2;
      // E' passato un tempo >= a 100ms?
      delta_time = now2 - last_time;
      if (delta_time >= ms100_timestamp) 
      { // Si. Leggo Posizione e Corrente da Dynamixel  
        gbl_servo_pub.id = GRIPPER_SERVO;
        // Read the value of the position
        // Acquisisco il valore solo se non ci sono errori
        // In caso contrario uso il valore precedente, rimasto nella variabile globale
        st_spare = servo->getPosition(&sb_state); // PresentPosition@0x24
        if (sb_state == true)
          gbl_servo_pub.currentPosition  = st_spare;  // Update the value, if the measure is invalid keep the old value
        // Read the value of the current in bits
        st_spare = servo->getCurrentLoad(&sb_state); // PresentLoad@0x28
        if (sb_state == true)
          gbl_servo_pub.currentLoad  = st_spare;  // Update the value, if the measure is invalid keep the old value
#if 0
//        st_spare = servo->getAngleLimit(&sb_state, false);
//        if (sb_state == true)
//          gbl_servo_pub.currentSpeed  = st_spare;  // Update the value, if the measure is invalid keep the old value
//        st_spare = servo->getTorqueLimit(&sb_state); // PresentLoad@0x28
//        if (sb_state == true)
//          gbl_servo_pub.currentSpeed  = st_spare;  // Update the value, if the measure is invalid keep the old value
//        st_spare = servo->getMaxTorque(&sb_state); // PresentLoad@0x28
//        if (sb_state == true)
//          gbl_servo_pub.currentSpeed  = st_spare;  // Update the value, if the measure is invalid keep the old value
#else
        gbl_servo_pub.currentSpeed       = 0; // ToDo PresentSpeed@0x26
#endif
        gbl_servo_pub.currentTemperature = 0; // ToDo PresentTemperature@0x2B
        sd_error = servo->getError();
        if (sd_error != 0)
        {
          Module::led_red.set();
          servo->disable();
#if 0
          st_spare = servo->getMaxTorque(&sb_state); // Restore the maximun value of the torque
          if (sb_state == true)
            servo->setTorqueLimit(st_spare);
#endif
          st_spare = TORQUE_LIMITATION_VALUE; // 180528 VP Limit the max Torque in order to avoid saturation when the gun is closed, this limits the current at 220mA
          servo->setTorqueLimit(st_spare);
          servo->enable();
          Module::led_red.clear();
        }
        else
        {          
          if (servo_pub.alloc(servo_msgp))
          {
            *servo_msgp = gbl_servo_pub;
            servo_pub.publish(servo_msgp);
          }
        }
        last_time = now2;
      }
    }
} // dynamixel_node

#if YOU_WANT_TO_USE_EDO_JOINT_MESSAGES
#if 0
void
setack(const uint8_t flag)
{
  // Low nibble bits 0-3 are reserved for the ack code
  if ((flag & J_STATE_ACK_MASK) == 0)
    return;// If there is not a valid code, exit

  ack |= flag;
  ackindex = J_STATE_ACK_CYCLES;
//  Module::led_red.toggle();
}
#endif
void
proxy_node(
    void* arg
)
{
    core::mw::Node node("proxy_node");
    core::mw::Subscriber<comau_edo::edo_msgs::EdoJointCtrl, 2>  edo_joint_sub;
    core::mw::Subscriber<core::dynamixel_msgs::DynamixelServoMsg, 5>  dynamixel_servo_sub;
    core::mw::Publisher<core::dynamixel_msgs::DynamixelCommandMsg> dynamixel_cmd_pub;
    core::mw::Publisher<core::control_msgs::Encoder_State> encoder_pub;
    core::mw::Publisher<comau_edo::edo_msgs::EdoJointVersion> version_pub;
    core::mw::Subscriber<comau_edo::edo_msgs::EdoJointVersion, 2> version_sub;
    core::mw::Subscriber<comau_edo::edo_msgs::EdoJointInit, 2> discovery_sub;
    // Do not publish commands when not needed
    core::dynamixel_msgs::DynamixelCommandMsg last_DynamixelCommandMsg;
    core::dynamixel_msgs::DynamixelServoMsg   last_DynamixelServoMsg;
    core::dynamixel_msgs::DynamixelServoMsg*  servo_msg;

    int ackindex = 0;
    uint8_t ack = 0; //Acknowledge/Errors
    core::os::Time  last_time;
//    core::os::Time  ms2_timestamp = core::os::Time::ms(2);
    core::os::Time  ms5_timestamp = core::os::Time::ms(5);
    core::os::Time  ms10_timestamp = core::os::Time::ms(10);
    core::os::Time  now2;
    core::os::Time  delta_time;

    bool version_req = false;

    node.subscribe(edo_joint_sub, "j7_setpnt");  // Do not change the name, see joint.cpp
    node.subscribe(version_sub,   "joint_version");  // Do not change the name, see MasterNode.cpp/RosSerialNode.cpp
    node.subscribe(discovery_sub, "joint_init");  // Do not change the name, see MasterNode.cpp/RosSerialNode.cpp
    node.subscribe(dynamixel_servo_sub, "dynamixel_servo");

    node.advertise(dynamixel_cmd_pub, "dynamixel_cmd");
    node.advertise(version_pub,       "j7_version");  // Do not change the name, see joint.cpp
    node.advertise(encoder_pub,       "j7_state");  // Do not change the name, see joint.cpp

    // Trigger first publish
    last_DynamixelCommandMsg.id = GRIPPER_NO_SERVO;
    // Initialize the time rate
    now2 = last_time = core::os::Time::now();
    last_DynamixelServoMsg = gbl_servo_pub;
    while (true) {
      if (node.spin(ms5_timestamp)) {
        comau_edo::edo_msgs::EdoJointCtrl* edo_joint;
        comau_edo::edo_msgs::EdoJointInit* edo_discovery;
        comau_edo::edo_msgs::EdoJointVersion* edo_version;

        while(discovery_sub.fetch(edo_discovery)){
          if((edo_discovery->mode == 0) && (edo_discovery->joints_mask & AX7_JOINT_MASK)){
            ack |= J_STATE_ACK_INIT;
            ackindex = J_STATE_ACK_CYCLES;
//            Module::led_red.toggle();
          }
          discovery_sub.release(*edo_discovery);
        }

        while(version_sub.fetch(edo_version)){
          if(edo_version->id == 7){
            ack |= J_STATE_ACK_VERSION;
            ackindex = J_STATE_ACK_CYCLES;
            version_req = true;
//            Module::led_red.toggle();
          }
          version_sub.release(*edo_version);
        }

        while(edo_joint_sub.fetch(edo_joint))
        {
          core::dynamixel_msgs::DynamixelCommandMsg* dynamixel_cmd;
          // Do not publish commands when not needed
          if (edo_joint->position != last_DynamixelCommandMsg.position)
          {
            if (dynamixel_cmd_pub.alloc(dynamixel_cmd))
            {
              dynamixel_cmd->id = GRIPPER_SERVO;
              dynamixel_cmd->position = edo_joint->position;
              dynamixel_cmd->speed = 0;                     // use the maximum speed // 10 / 0.111f;  // edo_joint->velocity;

              last_DynamixelCommandMsg = *dynamixel_cmd;    // Save the data 

              dynamixel_cmd_pub.publish(dynamixel_cmd);
            }
          }
          edo_joint_sub.release(*edo_joint);
        }

        if (dynamixel_servo_sub.fetch(servo_msg))
        {
          last_DynamixelServoMsg = *servo_msg;
          dynamixel_servo_sub.release(*servo_msg);
        }
      }

      if(version_req){
        version_req = false;
        comau_edo::edo_msgs::EdoJointVersion* version;

        if (version_pub.alloc(version))
        {
          //Fill in the message fields
          version->id       = 7;
          version->major    = EDO_JOINT_FW_MAJOR;
          version->minor    = EDO_JOINT_FW_MINOR;
          version->revision = EDO_JOINT_FW_REVISION;
          version->svn      = EDO_JOINT_FW_SVN;
          //Public the message
          version_pub.publish(version);
        }
      }

      now2 = core::os::Time::now();
      if (now2 < last_time)
        last_time = now2;
      delta_time = now2 - last_time;
      if (delta_time >= ms10_timestamp)
      {
        core::control_msgs::Encoder_State* encoder;
        if (encoder_pub.alloc(encoder))
        {
          //Fill in the message fields
          if (last_DynamixelServoMsg.currentPosition > ENCODER_TBL_MAX)
            last_DynamixelServoMsg.currentPosition = ENCODER_TBL_MAX;
          if (last_DynamixelServoMsg.currentPosition < ENCODER_TBL_MIN)
            last_DynamixelServoMsg.currentPosition = ENCODER_TBL_MIN;

          float sf_pos_mm;
          sf_pos_mm    = sat_from_bits_to_mm[last_DynamixelServoMsg.currentPosition - ENCODER_TBL_MIN];
          if (sf_pos_mm < 0.0f)
          {
        	  sf_pos_mm = 0.0f;
          }
          encoder->position    = sf_pos_mm;
          encoder->velocity    = ((float)last_DynamixelServoMsg.currentSpeed);
          encoder->current     = ((float)last_DynamixelServoMsg.currentLoad);
          if (ackindex > 0)
          {
            ackindex--;
          }
          else 
          {
            //...when zero, clear the ack bits
            ack &= 0xF0;
          }
          encoder->commandFlag = ack;
          Module::led_red.toggle();
          //Public the message
          encoder_pub.publish(encoder);
        }
        last_time = now2;
      }
    }
}
#endif

/*
 * Application entry point.
 */
extern "C" {
    int
    main(
        void
    )
    {
        module.initialize();

        // Default configuration
        led_subscriber_configuration_default.topic = "led";

        // Add configurable objects to the configuration manager...
        module.configurations().add(led_subscriber, led_subscriber_configuration_default);

        // ... and load the configuration
        module.configurations().loadFrom(module.configurationStorage());

        // Add nodes to the node manager...
        module.nodes().add(led_subscriber);

        // ... and let's play!

        gbl_servo_pub.id              = GRIPPER_SERVO;
        gbl_servo_pub.currentPosition = 500;
        gbl_servo_pub.currentSpeed    = 16;
        gbl_servo_pub.currentLoad     = 124;
        module.nodes().setup();
        module.nodes().run();

        // Custom nodes
        core::os::Thread::create_heap(nullptr, 4096, core::os::Thread::PriorityEnum::NORMAL + 1, dynamixel_node, nullptr, "dn");

#if YOU_WANT_TO_USE_EDO_JOINT_MESSAGES
        core::os::Thread::create_heap(nullptr, 4096, core::os::Thread::PriorityEnum::NORMAL + 1, proxy_node, nullptr, "pn");
#endif

        // Is everything going well?
        for (;;) {
            if (!module.nodes().areOk()) {
                module.halt("This must not happen!");
            }

            core::os::Thread::sleep(core::os::Time::ms(500));

            // Remember to feed the (watch)dog!
            module.keepAlive();
        }

        return core::os::Thread::OK;
    } // main
}
